package com.hebit.app.ui.screens.habits

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.hebit.app.domain.model.Habit
import com.hebit.app.domain.model.Resource
import com.hebit.app.domain.repository.HabitRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.launch
import java.time.LocalDateTime
import javax.inject.Inject

@HiltViewModel
class HabitViewModel @Inject constructor(
    private val habitRepository: HabitRepository
) : ViewModel() {
    
    private val _habitsState = MutableStateFlow<Resource<List<Habit>>>(Resource.Loading())
    val habitsState: StateFlow<Resource<List<Habit>>> = _habitsState.asStateFlow()
    
    private val _todayHabitsState = MutableStateFlow<Resource<List<Habit>>>(Resource.Loading())
    val todayHabitsState: StateFlow<Resource<List<Habit>>> = _todayHabitsState.asStateFlow()
    
    private val _selectedHabitState = MutableStateFlow<Resource<Habit?>>(Resource.Success(null))
    val selectedHabitState: StateFlow<Resource<Habit?>> = _selectedHabitState.asStateFlow()
    
    init {
        loadHabits()
        loadTodayHabits()
    }
    
    fun loadHabits() {
        viewModelScope.launch {
            habitRepository.getHabits()
                .onEach { result ->
                    _habitsState.value = result
                }
                .launchIn(this)
        }
    }
    
    fun loadTodayHabits() {
        viewModelScope.launch {
            habitRepository.getTodaysHabits()
                .onEach { result ->
                    _todayHabitsState.value = result
                }
                .launchIn(this)
        }
    }
    
    fun getHabitById(id: String) {
        viewModelScope.launch {
            habitRepository.getHabitById(id)
                .onEach { result ->
                    _selectedHabitState.value = result as Resource<Habit?>
                }
                .launchIn(this)
        }
    }
    
    fun createHabit(
        title: String,
        description: String,
        iconName: String,
        frequency: String
    ) {
        val newHabit = Habit(
            id = "", // Will be generated by the backend
            title = title,
            description = description,
            iconName = iconName,
            frequency = frequency,
            completedToday = false,
            streak = 0,
            createdAt = LocalDateTime.now(),
            updatedAt = LocalDateTime.now()
        )
        
        viewModelScope.launch {
            habitRepository.createHabit(newHabit)
                .onEach { result ->
                    if (result is Resource.Success) {
                        loadHabits()
                        loadTodayHabits()
                    }
                }
                .launchIn(this)
        }
    }
    
    fun updateHabit(habit: Habit) {
        viewModelScope.launch {
            habitRepository.updateHabit(habit)
                .onEach { result ->
                    if (result is Resource.Success) {
                        loadHabits()
                        loadTodayHabits()
                        _selectedHabitState.value = Resource.Success(result.data)
                    }
                }
                .launchIn(this)
        }
    }
    
    fun toggleHabitCompletion(id: String, completed: Boolean) {
        viewModelScope.launch {
            habitRepository.completeHabitForToday(id)
                .onEach { result ->
                    if (result is Resource.Success) {
                        loadHabits()
                        loadTodayHabits()
                    }
                }
                .launchIn(this)
        }
    }
    
    fun deleteHabit(id: String) {
        viewModelScope.launch {
            habitRepository.deleteHabit(id)
                .onEach { result ->
                    if (result is Resource.Success && result.data == true) {
                        loadHabits()
                        loadTodayHabits()
                        _selectedHabitState.value = Resource.Success(null)
                    }
                }
                .launchIn(this)
        }
    }
    
    fun clearSelectedHabit() {
        _selectedHabitState.value = Resource.Success(null)
    }
} 